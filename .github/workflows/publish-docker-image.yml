name: Build and publish Docker Image

on:
  workflow_call:
    inputs:
      context_path:
        required: true
        type: string
      version_file_name:
        required: true
        type: string
      apps_repo:
        required: true
        type: string
      version_file_directory:
        description: "Directory where version file with image ref is stored"
        required: false
        default: "./versions"
        type: string
      env_vars:
        description: "Optional environment variables (JSON) to be injected at build time"
        required: false
        default: ""
        type: string
    outputs:
      image_url:
        value: ${{ jobs.build.outputs.image_url }}
    secrets:
      PAT_REPO:
        required: true

env:
  REGISTRY: ghcr.io
  CONTEXT_PATH: ${{ inputs.context_path }}
  APPS_REPO: ${{ inputs.apps_repo }}
  BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  build:
    name: Build container image
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.set_output.outputs.image_url }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes in context path
        id: check_changes
        run: |
          if git diff --quiet HEAD^ HEAD -- ${{ env.CONTEXT_PATH }}; then
            echo "No changes in ${{ env.CONTEXT_PATH }}. Skipping build."
            echo "::set-output name=skip_build::true"
          else
            echo "::set-output name=skip_build::false"
          fi

      - name: Login to Github Container Registry
        if: steps.check_changes.outputs.skip_build == 'false'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Prepare build arguments
        id: prepare-build-args
        run: |
          BUILD_ARGS=""
          echo '${{ inputs.env_vars }}' | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > build_args.txt
          first=true
          while IFS= read -r line; do
            if [ "$first" = true ]; then
              BUILD_ARGS="$line"
              first=false
            else
              BUILD_ARGS="$BUILD_ARGS --build-arg $line"
            fi
          done < build_args.txt
          # Save the build-args string in the environment
          echo "BUILD_ARGS=$BUILD_ARGS" >> $GITHUB_ENV

      - name: Build and push Docker image
        if: steps.check_changes.outputs.skip_build == 'false'
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          file: ${{ env.CONTEXT_PATH }}/Dockerfile
          context: ${{ env.CONTEXT_PATH }}
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          build-args: |
            ${{ env.BUILD_ARGS }}

      - name: Checkout the repository
        if: steps.check_changes.outputs.skip_build == 'false'
        uses: actions/checkout@v3
        with:
          repository: kartverket/${{ env.APPS_REPO }}
          ref: main
          token: ${{ secrets.PAT_REPO }}

      - name: Create file
        if: steps.check_changes.outputs.skip_build == 'false'
        run: |
          setup_directory () {
              DIRECTORY=${{ inputs.version_file_directory }}
              touch $DIRECTORY/${{ inputs.version_file_name }}
              echo "\"${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.build-docker.outputs.digest }}\"" > $DIRECTORY/${{ inputs.version_file_name }} 
          }

          if [[ "${{ env.BRANCH }}" == "main" ]]; then
              setup_directory 
          fi

      - name: Commit and Push Changes
        if: steps.check_changes.outputs.skip_build == 'false'
        run: |
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "DASK CI"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update ${{ inputs.version_file_name }}"
            git push
          fi

      - name: Set output with build values
        if: steps.check_changes.outputs.skip_build == 'false'
        id: set_output
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT
